#!/usr/bin/env python
"""
wmagent-dbsbuffer-status

Print status information about files in DBSBuffer.
"""

import sys
import os
import threading

from optparse import OptionParser

from WMCore.WMInit import WMInit
from WMCore.Configuration import loadConfigurationFile
from WMCore.DAOFactory import DAOFactory

def connectToDB():
    """
    _connectToDB_

    Connect to the database specified in the WMAgent config.
    """
    if not os.environ.has_key("WMAGENT_CONFIG"):
        print "Please set WMAGENT_CONFIG to point at your WMAgent configuration."
        sys.exit(1)

    if not os.path.exists(os.environ["WMAGENT_CONFIG"]):
        print "Can't find config: %s" % os.environ["WMAGENT_CONFIG"]
        sys.exit(1)

    wmAgentConfig = loadConfigurationFile(os.environ["WMAGENT_CONFIG"])
        
    if not hasattr(wmAgentConfig, "CoreDatabase"):
        print "Your config is missing the CoreDatabase section."

    socketLoc = getattr(wmAgentConfig.CoreDatabase, "socket", None)
    connectUrl = getattr(wmAgentConfig.CoreDatabase, "connectUrl", None)
    (dialect, junk) = connectUrl.split(":", 1)

    myWMInit = WMInit()
    myWMInit.setDatabaseConnection(dbConfig = connectUrl, dialect = dialect,
                                   socketLoc = socketLoc)
    return

connectToDB()
myThread = threading.currentThread()
myDAOFactory = DAOFactory(package = "WMComponent.DBSBuffer.Database",
                          dbinterface = myThread.dbi)
statusDao = myDAOFactory("Status")
result = statusDao.execute()

datasetInfo = {}
for row in result:
    if not datasetInfo.has_key(row["path"]):
        datasetInfo[row["path"]] = []

    datasetInfo[row["path"]].append({"appName": row["app_name"], "appVer": row["app_ver"],
                                     "filesize": row["filesize"], "events": row["events"]})

for datasetPath in datasetInfo.keys():
    print "\n%s:" % datasetPath

    for datasetAlgo in datasetInfo[datasetPath]:
        scaledSize = float(datasetAlgo["filesize"]) / (1024 * 1024)
        print "\t%s, %s: %s events, %.2f MB" % (datasetAlgo["appName"], datasetAlgo["appVer"],
                                                 datasetAlgo["events"], scaledSize)
