#!/usr/bin/env python
"""
wmagent-workqueue

Utility script for manipulating workqueue.
"""

from optparse import OptionParser, OptionGroup
import os
import sys
import logging
import threading

from WMCore.WorkQueue.WorkQueueUtils import queueFromConfig
from WMCore.Configuration import loadConfigurationFile
from WMCore.WMInit import WMInit
from WMCore.WMInit import connectToDB

def createOptionParser():
    """
    _createOptionParser_

    Create an option parser that knows about all the options for manipulating
    and accessing resource control.
    """
    myOptParser = OptionParser()
    myOptParser.add_option("--status", dest = "status",
                           default = False, action = "store_true",
                           help = "Print out element's status.")
    myOptParser.add_option("--locations", dest = "updateLocations",
                           default = False, action = "store_true",
                       help = "Update data location's.")
    myOptParser.add_option("--priority", dest = "setPriority",
                           default = False, action = "store_true",
                           help = "Change priority of elements.")
    myOptParser.add_option("--queue", dest = "queueWork",
                           default = False, action = "store_true",
                           help = "Queue work directly to the WorkQueue.")
    myOptParser.add_option("--reset", dest = "resetWork",
                           default = False, action = "store_true",
                           help = "Reset elements status.")
    myOptParser.add_option("--delete", dest = "deleteWork",
                           default = False, action = "store_true",
                           help = "Delete elements.")
    myOptParser.add_option("--process", dest = "process",
                           default = False, action = "store_true",
                           help = "Process inbound work.")
    myOptParser.add_option("--clean", dest = "clean",
                           default = False, action = "store_true",
                           help = "Clean queue.")
    myOptParser.add_option("-i", "--interactive", dest = "interactive",
                           default = False, action = "store_true",
                           help = "Interactive console.")
    myOptParser.add_option("--reqmgr", dest = "requestmanager",
                           default = False, action = "store_true",
                           help = "Synchronize with RequestManager")

    group = OptionGroup(myOptParser, "WorkQueue elements selection.",
                    "Use these to select which elements to perform  "
                    "the desired operation on.")
    group.add_option("--workflow", dest="workflow", help="workflow name")
    group.add_option("--id", dest="id", help="element id")
    myOptParser.add_option_group(group)

    group = OptionGroup(myOptParser, "General options.",
                    "General options to direct bahviour")
    group.add_option("--config", dest="config", help="wm agent config",
                     default = os.environ.get("WMAGENT_CONFIG", None))
    myOptParser.add_option_group(group)

    return myOptParser


def createWorkQueue(config):
    """Create a workqueue from wmagent config"""
    return queueFromConfig(config)


def connectionTest(configFile):
    """
    _connectionTest_

    Create a DB Connection instance to test the connection specified
    in the config file.

    """
    config = loadConfigurationFile(configFile)
    wmInit = WMInit()

    if not hasattr(config, "CoreDatabase"):
        print "No CoreDatabase section."
        sys.exit(1)

    (dialect, junk) = config.CoreDatabase.connectUrl.split(":", 1)
    socket = getattr(config.CoreDatabase, "socket", None)

    try:
       wmInit.setLogging('wmcoreD', 'wmcoreD', logExists = False, logLevel = logging.WARNING)
       wmInit.setDatabaseConnection(dbConfig = config.CoreDatabase.connectUrl,
                                    dialect = dialect,
                                    socketLoc = socket)
    except Exception, ex:
        msg = "Unable to make connection to using \n"
        msg += "parameters provided in %s\n" % config.CoreDatabase.connectUrl
        msg += str(ex)
        print msg
        raise ex

    return

def main():
    myOptParser = createOptionParser()
    (options, args) = myOptParser.parse_args()

    if not options.config or not os.path.exists(options.config):
        msg = "No Config file provided\n"
        msg += "provide one with the --config option"
        print(msg)
        sys.exit(1)

    cfgObject = loadConfigurationFile(options.config)

    workqueue = createWorkQueue(cfgObject)

    if options.status:
        print workqueue.status()
    elif options.updateLocations:
        workqueue.updateLocationInfo()
        # print out location list
    elif options.setPriority:
        priority = args[0]
        workqueue.setPriority(priority, options.workflow)
    elif options.queueWork:
        wf = args[0]
        workqueue.queueWork(wf)
    elif options.resetWork:
        workqueue.resetWork(options.id)
    elif options.process:
        workqueue.processInboundWork()
    elif options.deleteWork:
        workqueue.deleteWork(options.id)
    elif options.clean:
        workqueue.performQueueCleanupActions()
    elif options.interactive:
        msg = 'Workqueue available in "workqueue" variable'
        import code
        code.interact(banner = msg, local = locals())
    elif options.requestmanager:
        from WMCore.WorkQueue.WorkQueueReqMgrInterface import WorkQueueReqMgrInterface
        reqConfig = getattr(cfgObject.WorkQueueManager, 'reqMgrConfig', {})
        reqMgrInt = WorkQueueReqMgrInterface(**reqConfig)
        reqMgrInt(workqueue)

if __name__ == '__main__':
	main()