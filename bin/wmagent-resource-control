#!/usr/bin/env python
"""
wmagent-resource-control

Utility script for manipulating resource control.
"""

import sys
import os

from optparse import OptionParser

from WMCore.WMInit import WMInit
from WMCore.Configuration import loadConfigurationFile
from WMCore.ResourceControl.ResourceControl import ResourceControl

def connectToDB():
    """
    _connectToDB_

    Connect to the database specified in the WMAgent config.
    """
    if not os.environ.has_key("WMAGENT_CONFIG"):
        print "Please set WMAGENT_CONFIG to point at your WMAgent configuration."
        sys.exit(1)

    if not os.path.exists(os.environ["WMAGENT_CONFIG"]):
        print "Can't find config: %s" % os.environ["WMAGENT_CONFIG"]
        sys.exit(1)

    wmAgentConfig = loadConfigurationFile(os.environ["WMAGENT_CONFIG"])
        
    if not hasattr(wmAgentConfig, "CoreDatabase"):
        print "Your config is missing the CoreDatabase section."

    socketLoc = getattr(wmAgentConfig.CoreDatabase, "socket", None)
    connectUrl = getattr(wmAgentConfig.CoreDatabase, "connectUrl", None)
    (dialect, junk) = connectUrl.split(":", 1)

    myWMInit = WMInit()
    myWMInit.setDatabaseConnection(dbConfig = connectUrl, dialect = dialect,
                                   socketLoc = socketLoc)
    return

def createOptionParser():
    """
    _createOptionParser_

    Create an option parser that knows about all the options for manipulating
    and accessing resource control.
    """
    myOptParser = OptionParser()
    myOptParser.add_option("-p", "--thresholds", dest = "printThresholds",
                           default = False, action = "store_true",
                           help = "Print out all known thresholds and site information.")
    myOptParser.add_option("--site-name", dest = "siteName",
                           help = "Specify the name of the site")
    myOptParser.add_option("--job-slots", dest = "jobSlots",
                           help = "Specify the number of job slots to use at the site")
    myOptParser.add_option("--ce-name", dest = "ceName",
                           help = "Specify the CEName for the site")
    myOptParser.add_option("--se-name", dest = "seName",
                           help = "Specify the SEName for the site")
    myOptParser.add_option("--task-type", dest = "taskType",
                           help = "Specify the name of the task to add/modify")
    myOptParser.add_option("--min-slots", dest = "minSlots",
                           help = "Specify the minimum number of slots for the task type")
    myOptParser.add_option("--max-slots", dest = "maxSlots",
                       help = "Specify the maximum number of slots for the task type")

    return myOptParser

def updateResourceControl(resourceControl, optParser, opts):
    """
    _updateResourceControl_

    Manipulate resource control.
    """
    if opts.taskType == None and opts.siteName == None:
        print "You must specify a site name to add a site or a site name and a task type to add a task threshold.\n"
        myOptParser.print_help()
        sys.exit(1)
    if opts.taskType == None and opts.siteName != None:
        if opts.jobSlots == None:
            print "You must specify the maximum number of job slots to use at the site.\n"
            myOptParser.print_help()            
            sys.exit(1)
        elif opts.ceName == None:
            print "You must specify the CE name for the site.\n"
            myOptParser.print_help()            
            sys.exit(1)

        resourceControl.insertSite(siteName = opts.siteName, jobSlots = int(opts.jobSlots),
                                     seName = opts.seName, ceName = opts.ceName)
    else:
        if len(resourceControl.listSiteInfo(opts.siteName)) == 0:
            if opts.jobSlots == None:
                print "This site does not exist inside the ResourceControl DB.  You must specify the maximum number of job slots to use at the site.\n"
                myOptParser.print_help()            
                sys.exit(1)
            elif opts.ceName == None:
                print "This site does not exist inside the ResourceControl DB.  You must specify the CE name for the site.\n"
                myOptParser.print_help()            
                sys.exit(1)            

            resourceControl.insertSite(siteName = opts.siteName, jobSlots = int(opts.jobSlots),
                                       seName = opts.seName, ceName = opts.ceName)           
        else:
            if opts.minSlots == None or opts.maxSlots == None:
                print "You must specify the minimum and maximum number of batch slots for the task type."
                myOptParser.print_help()            
                sys.exit(1)

            resourceControl.insertThreshold(siteName = opts.siteName, taskType = opts.taskType,
                                            minSlots = int(opts.minSlots), maxSlots = int(opts.maxSlots))
    return

myOptParser = createOptionParser()
(options, args) = myOptParser.parse_args()
connectToDB()
myResourceControl = ResourceControl()

if options.printThresholds == True:
    print "Thresholds and current status for all sites:\n"

    thresholds = myResourceControl.listThresholdsForSubmit()

    for siteName in thresholds.keys():
        siteThresholds = thresholds[siteName]

        siteSlots = siteThresholds[siteThresholds.keys()[0]]["total_slots"]
        siteJobs = siteThresholds[siteThresholds.keys()[0]]["total_running_jobs"]        
        print "%s - %d running, %d slots total:" % (siteName, siteJobs, siteSlots)

        for taskType in siteThresholds.keys():
            print "  %s - %d running, %d max, %d min" % \
                  (taskType, siteThresholds[taskType]["task_running_jobs"],
                   siteThresholds[taskType]["max_slots"],
                   siteThresholds[taskType]["min_slots"])
            if siteThresholds[taskType]["task_running_jobs"] > 0:
                tasks = myResourceControl.listWorkloadsForTaskSite(taskType, siteName)
                for task in tasks:
                    print "    %d - %s" % (task["running"], task["task"])
            
        print ""
else:
    updateResourceControl(myResourceControl, myOptParser, options)
