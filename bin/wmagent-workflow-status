#!/usr/bin/env python
"""
wmagent-workflow-status

Query WMBS to determine workflow status in terms of number of jobs pending,
running and complete as well as whether or not input filesets are closed or
open.
"""

import sys
import os
import threading

from optparse import OptionParser

from WMCore.WMInit import connectToDB
from WMCore.Configuration import loadConfigurationFile
from WMCore.DAOFactory import DAOFactory

def createOptionParser():
    """
    _createOptionParser_

    Create an option parser that knows about all the options for printing status
    and failed job information.
    """
    myOptParser = OptionParser()
    myOptParser.add_option("-o", "--overview", dest = "printOverview",
                           action = "store_true",
                           help = "Print out an overview of processing status for all workflows.")
    myOptParser.add_option("-f", "--fail", dest = "printFailed",
                           action = "store_true",
                           help = "Print out a list of failed jobs for each workflow.")
    myOptParser.add_option("-r", "--retried", dest = "printRetried",
                           action = "store_true",
                           help = "Print out a list of jobs that have failed at least once and are being retried.")
    
    return myOptParser
                                            
def getWorkflowStatus():
    """
    _getWorkflowStatus_
    
    Query WMBS for status information on all jobs and workflow.  Format the
    information so that it is easy to display.
    """
    myThread = threading.currentThread()
    myDAOFactory = DAOFactory(package = "WMCore.WMBS",
                              dbinterface = myThread.dbi)
    statusDao = myDAOFactory("Workflow.Status")
    result = statusDao.execute()

    workflowInfo = {}
    workflowOpen = {}
    for row in result:
        if row["success"] == None:
            row["success"] = 0
        if row["jobs"] == None:
            row["jobs"] = 0        
        
        if not workflowInfo.has_key(row["owner"]):
            workflowInfo[row["owner"]] = {}
            workflowOpen[row["owner"]] = {}
        if not workflowInfo[row["owner"]].has_key(row["task"]):
            workflowInfo[row["owner"]][row["task"]] = {"pending": 0, "running": 0,
                                                       "complete": 0, "successful": 0}
            workflowOpen[row["owner"]][row["task"]] = 0

        if row["name"] in ["complete", "success", "exhausted", "cleanout"]:
            workflowInfo[row["owner"]][row["task"]]["complete"] += int(row["jobs"])
        elif row["name"] in ["created"]:
            workflowInfo[row["owner"]][row["task"]]["pending"] += int(row["jobs"])        
        else:
            workflowInfo[row["owner"]][row["task"]]["running"] += int(row["jobs"])

        workflowInfo[row["owner"]][row["task"]]["successful"] += int(row["success"])
        workflowOpen[row["owner"]][row["task"]] += int(row["open"])

    return (workflowInfo, workflowOpen)

def displayWorkflowStatus():
    """
    _displayWorkflowStatus_

    Print information for each worklfow known to WMBS.
    """
    (workflowInfo, workflowOpen) = getWorkflowStatus()

    for owner in workflowInfo.keys():
        print "\n%s:" % owner

        tasks = workflowInfo[owner].keys()
        tasks.sort()
        for task in tasks:
            if workflowOpen[owner][task] == 0:
                print "  %s (closed):" % task
            else:
                print "  %s (open):" % task
            
            print "    %s pending, %s running, %s complete (%s successful)" % (workflowInfo[owner][task]["pending"],
                                                                               workflowInfo[owner][task]["running"],
                                                                               workflowInfo[owner][task]["complete"],
                                                                               workflowInfo[owner][task]["successful"])

    return

def displayFailedJobs():
    """
    _displayFailedJobs_

    Query WMBS for information about failed jobs and format the data so that it
    is easily printed.
    """
    myThread = threading.currentThread()
    myDAOFactory = DAOFactory(package = "WMCore.WMBS",
                              dbinterface = myThread.dbi)
    failDao = myDAOFactory("Workflow.FailedJobs")
    results = failDao.execute()

    # owner, task, jobId
    jobInfo = {}
    for result in results:
        if not jobInfo.has_key(result["owner"]):
            jobInfo[result["owner"]] = {}
        if not jobInfo[result["owner"]].has_key(result["task"]):
            jobInfo[result["owner"]][result["task"]] = []

        jobInfo[result["owner"]][result["task"]].append(result["id"])

    print "Failed job IDs per workflow:"
    print ""

    printJobInfo(jobInfo)
    return

def displayRetriedJobs():
    """
    _displayRetriedJobs_

    Query WMBS for information about retried jobs and format the data so that it
    is easily printed.
    """
    myThread = threading.currentThread()
    myDAOFactory = DAOFactory(package = "WMCore.WMBS",
                              dbinterface = myThread.dbi)
    failDao = myDAOFactory("Workflow.FailedJobs")
    results = failDao.execute()

    # owner, task, jobId
    jobInfo = {}
    for result in results:
        if not jobInfo.has_key(result["owner"]):
            jobInfo[result["owner"]] = {}
        if not jobInfo[result["owner"]].has_key(result["task"]):
            jobInfo[result["owner"]][result["task"]] = []

        jobInfo[result["owner"]][result["task"]].append(result["id"])

    print "Retried job IDs per workflow:"
    print ""

    printJobInfo(jobInfo)
    return

def printJobInfo(jobInfo):
    """
    _printJobInfo_

    Print out job and owner information.
    """
    for owner in jobInfo.keys():
        print "%s:" % owner
        for task in jobInfo[owner].keys():
            print "  %s:" % task

            jobsPrinted = 0
            jobsPrintedOnLine = 0
            lastJobIndex = len(jobInfo[owner][task]) - 1
            for jobID in jobInfo[owner][task]:
                if jobsPrinted != lastJobIndex:
                    if jobsPrintedOnLine == 0:
                        print "    %s, " % jobID,
                    else:
                        print "%s, " % jobID,
                else:
                    if jobsPrintedOnLine == 0:
                        print "    %s" % jobID,
                    else:
                        print "%s" % jobID,                    
                    
                jobsPrinted += 1
                jobsPrintedOnLine += 1

                if jobsPrintedOnLine == 10:
                    print ""
                    jobsPrintedOnLine = 0

            print ""

    return

connectToDB()

myOptParser = createOptionParser()
(options, args) = myOptParser.parse_args()

if options.printOverview == True:
    displayWorkflowStatus()
elif options.printFailed == True:
    displayFailedJobs()
elif options.printRetried == True:
    displayRetriedJobs()
else:
    myOptParser.print_help()
