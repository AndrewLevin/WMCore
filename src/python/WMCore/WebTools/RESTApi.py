#!/usr/bin/env python
from WMCore.WebTools.WebAPI import WebAPI
from WMCore.WebTools.Page import Page, exposejson, exposexml
from WMCore.WMFactory import WMFactory
from cherrypy import expose, request, response
from cherrypy.lib.cptools import accept
from simplejson import JSONEncoder

class RESTApi(WebAPI):
    __version__ = 1
    def __init__(self, config = {}):
        modelconfig = config.section_('model')
        modelconfig.application = config.application

        self.set_model(config.section_('model'))
        
        WebAPI.__init__(self, config)
        self.methods.update({'GET':{'args':[],
                                 'call':self.model.handle_get,
                                 'version': 1},
                            'POST':{'args':[],
                                 'call':self.model.handle_post,
                                 'version': 1},
                            'PUT':{'args':[],
                                 'call':self.model.handle_put,
                                 'version': 1},
                            'DELETE':{'args':[],
                                 'call':self.model.handle_delete,
                                 'version': 1},
                            'UPDATE':{'args':[],
                                 'call':self.model.handle_update,
                                 'version': 1}})
        
        self.supporttypes  = ['application/xml', 'application/atom+xml',
                             'text/json', 'text/x-json', 'application/json',
                             'text/html','text/plain']
        
    def set_model(self, model):
        factory = WMFactory('webtools_factory')
        self.model = factory.loadObject(model.object, model)

    @expose
    def index(self, *args, **kwargs):
        """
        Return the auto-generated documentation for the API
        """
        if len(args) == 0 and len(kwargs) == 0:
            return self.templatepage('API', methods = self.methods, 
                                 application = self.config.application)
        else:
            return self.buildResponse(args, kwargs)
    @expose
    def default(self, *args, **kwargs):
        """
        Return the autogenerated documentation for the API (by calling index())
        """
        return self.index(args, kwargs)
    
    def buildResponse(self, args, kwargs):
        """
        Set the headers for the response appropriately and format the response 
        data (e.g. serialise to XML, JSON, RSS/ATOM).
        """
        datatype = accept(self.supporttypes)
        response.headers['Content-Type'] = datatype
        
        data = self.methods[request.method]['call'](args, kwargs)
        if datatype in ('text/json', 'text/x-json', 'application/json'):
            # Serialise to json
            try:
                encoder = JSONEncoder()
                jsondata = encoder.iterencode(data)
                
                response.headers['Content-Length'] = len(jsondata)
                return jsondata
            except:
                Exception("Fail to jsontify obj '%s' type '%s'" % (data, type(data)))
        elif datatype == 'application/xml':
            # Serialise to xml
            return self.templatepage('XML', data = data, config = self.config, 
                                     request = request)
        elif datatype == 'application/atom+xml':
            # Serialise to xml
            return self.templatepage('Atom', data = data, config = self.config,
                                     request = request)

        # TODO: Add other specific content types
        response.headers['Content-Length'] = len(data)
        return data
        