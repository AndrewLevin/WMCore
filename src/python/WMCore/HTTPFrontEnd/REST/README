Welcome to REST service of WMCore.

Let me explain a structure of the code as well as its maintenance.

Structure:
----------
Code has been divided into the following folders:
.
|-- Controllers
|   `-- REST
|-- Templates
|   `-- tmpl
|-- bin
|-- css
|-- images
|-- js
|-- scripts
|-- services
|   |-- rest
|   `-- test
`-- utils

* Controllers
  contains a controller code to be used by WEBTOOLS framework, 
  actual implementation sits in REST sub-folder
* Templates
  a directory with templates used by REST HTTP front-end pages, 
  all templates are text-based files in tmpl. In order to generate 
  python template code, please use ./scripts/genTemplates.sh script 
  which will walk through tmpl directory and generate 
  python (Chetah)-template in Templates.
* bin
  rest_init script is available for your convenience. It is based
  on cmsWeb, so your path should reflect that
* css, images, js 
  are obvious folder to manage your web pages
* scripts
  contains REST specific set of scripts, I put my local setup.sh
  and genTemplate.sh over there
* services
  contain code for REST itself
  - rest
    folder which contains actual implementation of REST
    Resource.py is abstract base class which does all the work based
    on provided model/formatter
    RestService.py is abstract base class used by server
    RestServer.py is concrete implementation of REST server based
    on TestModel and TestFormatter classes
  - test
    a toy-implementation of your model and formatter for REST service,
    as well as stand-along (no WEBTOOLS) implementation of REST in
    restServer.py and associated client test code, TestRestServer.py
* utils
  a general set of utils used by REST modules.

Usage:
------
you are in charge of providing your Model and Formatter classes which 
will provide a functionally of how to retrieve/create/update/delete your
data and format it accordingly to MIME type (TXT, HTML, XML, JSON).

For your convenience I provided a simple implementation of those classes,
please refer to services/test/TestModel.py and services/test/TestFormatter.py

Once you have your own implementation of Model/Formatter you may be willing
to modify or create your own RestServer.py. Currently it uses TestModel
and TestFormatter classes.

Running REST:
-------------

I provided two ways to run REST server, in stand-alone mode, see
services/test/RestServerExample.py or as a part of WEBTOOLS framework, via
Controller/REST/__init__.py

In stand-along mode you're only rely on CherryPy installed elsewhere on
your system. While if you want to run REST server within WEBTOOLS framework
you need to setup your environment appropriately and run it as
cmsWeb --base-url=<your url, e.g. http://localhost:8080 > --port=<port>
--default-page /services

For your convenience I created bin/rest_init script which can be used to
run REST within WEBTOOLS framework.

Authentication/Authorization:
-----------------------------
This should be easily implemented in Resource.py via mechanism used in
WEBTOOLS framework.

Templates:
----------
I provided ability to use templates (based on Cheetah framework).
All templates are stored in Templates/tmpl/ in a form of file.tmpl
And actual python code can be generated by using scripts/genTemplate.sh
The python code will be stored in Tempaltes folder.

